・本当に必要最低限の, 動くって所までは作れたので, ここからは元論文のbootStrapingの実装, 利用可能なステージ画像の生成を視野に入れていく必要がある.

・いや〜動いてくれて本当によかった. 画像(テンソル)を実際のマップに置き換えるスクリプトをc#上で実装しないとな.

## 2024/11/22. 記.

・GPT with Canvasっていう, ほぼコーディング専用のGPTモデルが出てきたことで, 修論の開発が爆発的に進んだ.

・現在は, 2022年に発表されていた, GANを利用した少数データによる多様なゲームレベルデザイン生成のコードはほとんど再現し終えている.

・次の目標として, より内容がアップデートされ, 2024年に発表されたGANを利用した少数データによる汎用ゲームレベルデザインのコード開発を実行したい.
    →   この論文では, ブートストラッピングはもちろんのこと, 目的関数にハミング距離ではなくmode seeking正規化項を採用している点が大きく違う. ここがGANの出力結果を多様にする大きなポイントとなっている.

・モード崩壊を防ぐためのmode seeking 正規化項については, 次のページ(https://qiita.com/Phoeboooo/items/c2688a7f683925a3fdd6)で解説されているので参照したい.

・これは上手くいけば, ステージのグラフ化って部分にも一瞬で取り掛かれるかもしれないな.


## 2024/11/25. 記.

・元の論文(2022)の実装を確認したが, よく読んでみると当初想定していたものより複雑な実装をしていることが判明した. 特に損失関数の改造と, データ拡張の条件付け(プレイアビリティ判定メソッドが必要.)が複雑だった.
    → また, 生成ステージの補正についても, 最適な潜在変数の探索で解決していた(例えば扉の鍵が二つある, など).

・まだ元論文の再現の段階ではあるが, やはり, ステージの大きさが一定を超えないと潜在変数探索で補正は十分という話になってしまいそうだ.

・とりあえず, 損失関数への正規化項適用と, 出力テンソルに対するプレイアビリティ判定メソッド, 加えてデータ拡張部分の修正を頑張る. 学習元データも35に増やす.

## 2024/11/26. 記(沖縄行きの機内にて).

・ステージのグラフ化, というアイディアについては一つのシーンについてのみ, その依存関係を学習さる予定だった.

・しかし, 初代Zeldaのマップを参照していて気がついた. 別にシーンのみを学習させる必要はない.
    → 個々のシーンの依存関係(ボスがいる場所がどこか, 重要アイテムの場所はどこか, 等.)を学習させて, より広域のステージ生成を自動化することも可能ではないだろうか. (この場合, 学習データを用意するのがさらに難しくなるので, Zelda_GANのようなものを使って少数のデータから拡張して学習していく形になるだろうが.)

・てか, プレイアビリティってどうやって定義したらいいんだ？　元の論文より要素が多いからそこら辺の定義もだいぶ面倒くさそうだ.

・実験してみた感じ, 0から1000ステップ学習させただけだと全然学習できていない感じだった. やっぱ10000は必要な気がする.


## 2024/12/2. 記

・ゼロから1000Epoch学習させた場合だと, 出力が不十分だった. このため2000Epochで0から学習させてみる. なお, 既に学習モデルがあった場合, それをロードして学習を続ける仕様である点に注意が必要.

・まだデータ拡張部分の確認と, データ追加回数の設定とかもやれてない. 距離関数とかも実装できてないし, モード正規化項とかも実装してなかったわ. やらないと.

・現在, 少ないデータ数(3~5つ？)で1000Epoch学習させた場合に比べ, 35データで学習させると明らかに過学習が発生している気がする. Acc 1.0は流石におかしいだろう.
    → 元論文の完全な実装や, 画像確認をしてみないとわからないが, 機械学習においてacc1.0という値は看過できない.

・あえてデータ数を絞ってみるなど, 対策が必要かもしれない.
    → 1000Epoch学習させたデータをロードして1000Epoch追加学習させる場合と, 0から2000Epoch学習させる場合では結果が変わるのだろうか？
    → どんな感じで学習データが入力に適用されているかは知らないが, いきなり35データを学習させるのではなく, 徐々に学習データを拡張していく方式に変更したらうまくいくのだろうか?

・データ拡張か, ハミング距離の適用が学習精度下げてる説あるな. やっぱ機械学習って地道だわ.

・加えて, 学習モデルは割と不可逆であることも実感した. まさかデータ増やしたら学習精度下がるとは思ってなかった.

・モード正規化項を実装したメソッドを追加. まだシステムには追加していない.

・また, 学習Epochを試しに2000に増やしたところ, 断続的にロード, 学習を実行するよりも途中経過が良好だった. ただ, MacBookだとメモリがはち切れてしまったので, Windowsでの環境構築が急務になる.


## 2024/12/3. 記.

・とりあえず, ネットワークへの適用を除けば, 基本的な仮実装は完了した気がする.

・次は, マップのデータ拡張について, プレイアビリティの判定部分が間違っている(判別対象のチャネル番号が間違っている)箇所があるので, そこを修正しないと正しく学習されない.
    → 修正済み.

・また, 学習データ数の増加と目的関数の変更のどちらが学習精度に影響しているのかわからないので, そこも検討する必要がある.
    → 基本部分は実装してあるので, オリジナルの目的関数を採用して学習をしてみてもいいかもしれない.

・次はカスタム目的関数の実装かな.